; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\usart.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\usart.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\usart.crf ..\drive\usart.c]
                          THUMB

                          AREA ||i.UART1_Send||, CODE, READONLY, ALIGN=2

                  UART1_Send PROC
;;;153    
;;;154    void UART1_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;155    {
;;;156    	static vu8 UART_Buffer_Send_pointer=0;
;;;157    		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L1.72|
000004  7820              LDRB     r0,[r4,#0]  ; UART_Buffer_Send_pointer
000006  78a1              LDRB     r1,[r4,#2]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L1.56|
;;;158             {
;;;159    					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L1.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L1.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L1.54|
;;;160    					 {
;;;161    						USART_SendData(USART1,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  7821              LDRB     r1,[r4,#0]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L1.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L1.36|
;;;162    						while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//ֈսע̍Ϊԉ
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L1.36|
;;;163    						UART_Buffer_Send_pointer++;
000030  7820              LDRB     r0,[r4,#0]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  7020              STRB     r0,[r4,#0]
                  |L1.54|
;;;164    					}
;;;165             }
;;;166    		else 
;;;167    		{
;;;168    			UART_Buffer_Send_pointer=0;
;;;169    			UART_SEND_flag=0;//ע̍Ϊԉһ֡˽ߝ
;;;170    		}
;;;171    }
000036  bd70              POP      {r4-r6,pc}
                  |L1.56|
000038  2000              MOVS     r0,#0                 ;168
00003a  7020              STRB     r0,[r4,#0]            ;168
00003c  4806              LDR      r0,|L1.88|
00003e  6801              LDR      r1,[r0,#0]            ;169  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;169
000044  6001              STR      r1,[r0,#0]            ;169  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;172    
                          ENDP

                  |L1.72|
                          DCD      ||area_number.13||
                  |L1.76|
                          DCD      ||area_number.9||
                  |L1.80|
                          DCD      ADDR
                  |L1.84|
                          DCD      0x40011000
                  |L1.88|
                          DCD      flagA

                          AREA ||i.UART3_Send||, CODE, READONLY, ALIGN=2

                  UART3_Send PROC
;;;173    
;;;174    void UART3_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;175     {
;;;176    	static vu8 UART_Buffer_Send_pointer=0;
;;;177    		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L2.72|
000004  7860              LDRB     r0,[r4,#1]  ; UART_Buffer_Send_pointer
000006  78a1              LDRB     r1,[r4,#2]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L2.56|
;;;178             {
;;;179    					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L2.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L2.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L2.54|
;;;180    					 {
;;;181    						USART_SendData(USART3,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  7861              LDRB     r1,[r4,#1]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L2.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L2.36|
;;;182    						while (USART_GetFlagStatus(USART3,USART_FLAG_TXE) == RESET);//ֈսע̍Ϊԉ
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L2.36|
;;;183    						UART_Buffer_Send_pointer++;
000030  7860              LDRB     r0,[r4,#1]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  7060              STRB     r0,[r4,#1]
                  |L2.54|
;;;184    					}
;;;185             }
;;;186    		else
;;;187    		{
;;;188    			UART_Buffer_Send_pointer=0;
;;;189    			UART_SEND_flag=0;//ע̍Ϊԉһ֡˽ߝ
;;;190    		}
;;;191    }
000036  bd70              POP      {r4-r6,pc}
                  |L2.56|
000038  2000              MOVS     r0,#0                 ;188
00003a  7060              STRB     r0,[r4,#1]            ;188
00003c  4806              LDR      r0,|L2.88|
00003e  6801              LDR      r1,[r0,#0]            ;189  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;189
000044  6001              STR      r1,[r0,#0]            ;189  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;192    
                          ENDP

                  |L2.72|
                          DCD      ||area_number.13||
                  |L2.76|
                          DCD      ||area_number.9||
                  |L2.80|
                          DCD      ADDR
                  |L2.84|
                          DCD      0x40004800
                  |L2.88|
                          DCD      flagA

                          AREA ||i.USART1_NVIC_Config||, CODE, READONLY, ALIGN=1

                  USART1_NVIC_Config PROC
;;;51     
;;;52     static void USART1_NVIC_Config(void)//Ԯࠚޓ˕א׏Ƥ׃
000000  b508              PUSH     {r3,lr}
;;;53     {
;;;54     	NVIC_InitTypeDef NVIC_InitStructure; 
;;;55     	/* Configure the NVIC Preemption Priority Bits */  
;;;56     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
000002  f44f60e0          MOV      r0,#0x700
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;57     	
;;;58     	/* Enable the USARTy Interrupt */
;;;59     	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;	 
00000a  2025              MOVS     r0,#0x25
00000c  f88d0000          STRB     r0,[sp,#0]
;;;60     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000010  2000              MOVS     r0,#0
000012  f88d0001          STRB     r0,[sp,#1]
;;;61     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000016  2001              MOVS     r0,#1
000018  f88d0002          STRB     r0,[sp,#2]
;;;62     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00001c  f88d0003          STRB     r0,[sp,#3]
;;;63     	NVIC_Init(&NVIC_InitStructure);
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       NVIC_Init
;;;64     }
000026  bd08              POP      {r3,pc}
;;;65     
                          ENDP


                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;103    
;;;104    void USART3_Configuration()//ԮࠚԵʼۯگ˽
000000  b530              PUSH     {r4,r5,lr}
;;;105    {  
000002  b087              SUB      sp,sp,#0x1c
;;;106        GPIO_InitTypeDef GPIO_InitStructure;
;;;107    	USART_InitTypeDef USART_InitStructure;
;;;108    	
;;;109    	/* config USART1 clock */
;;;110    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000004  2101              MOVS     r1,#1
000006  0488              LSLS     r0,r1,#18
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;111    //    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //ʹŜ GPIOA ʱד
;;;112        
;;;113    	GPIO_PinAFConfig(GPIOB,GPIO_PinSource10,GPIO_AF_USART3);
00000c  4d21              LDR      r5,|L4.148|
00000e  2207              MOVS     r2,#7
000010  210a              MOVS     r1,#0xa
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;114    	GPIO_PinAFConfig(GPIOB,GPIO_PinSource11,GPIO_AF_USART3);
000018  2207              MOVS     r2,#7
00001a  210b              MOVS     r1,#0xb
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;115        
;;;116    
;;;117        
;;;118        
;;;119    	/* USART1 GPIO config */
;;;120    	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;121    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000022  1529              ASRS     r1,r5,#20
000024  9105              STR      r1,[sp,#0x14]
;;;122    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000026  2402              MOVS     r4,#2
000028  f88d4018          STRB     r4,[sp,#0x18]
;;;123    //     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //ΆάشԃˤԶ
;;;124    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  f88d4019          STRB     r4,[sp,#0x19]
;;;125    	GPIO_Init(GPIOB, &GPIO_InitStructure);    
000030  a905              ADD      r1,sp,#0x14
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       GPIO_Init
;;;126    	/* Configure USART1 Rx (PA.10) as input floating */
;;;127    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
000038  02a1              LSLS     r1,r4,#10
00003a  9105              STR      r1,[sp,#0x14]
;;;128        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003c  f88d4018          STRB     r4,[sp,#0x18]
;;;129    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000040  a905              ADD      r1,sp,#0x14
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       GPIO_Init
;;;130        
;;;131    
;;;132    	
;;;133    	/* USART1 mode config */
;;;134    	USART_InitStructure.USART_BaudRate = 9600;
000048  f44f5016          MOV      r0,#0x2580
00004c  9001              STR      r0,[sp,#4]
;;;135    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00004e  2000              MOVS     r0,#0
000050  f8ad0008          STRH     r0,[sp,#8]
;;;136    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000054  f8ad000a          STRH     r0,[sp,#0xa]
;;;137    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000058  f8ad000c          STRH     r0,[sp,#0xc]
;;;138    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00005c  f8ad0010          STRH     r0,[sp,#0x10]
;;;139    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000060  200c              MOVS     r0,#0xc
000062  f8ad000e          STRH     r0,[sp,#0xe]
;;;140    	USART_Init(USART3, &USART_InitStructure);
000066  4c0c              LDR      r4,|L4.152|
000068  a901              ADD      r1,sp,#4
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       USART_Init
;;;141        
;;;142    
;;;143    	
;;;144    	/******ʹŜԮࠚޓ˕א׏******************/
;;;145    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	
000070  2201              MOVS     r2,#1
000072  f2405125          MOV      r1,#0x525
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       USART_ITConfig
;;;146    	USART_Cmd(USART3, ENABLE);//ʹŜԮࠚ1
00007c  2101              MOVS     r1,#1
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       USART_Cmd
;;;147        USART_ClearFlag(USART3, USART_FLAG_TC);
000084  2140              MOVS     r1,#0x40
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       USART_ClearFlag
;;;148        
;;;149    
;;;150      
;;;151        USART3_NVIC_Config();//Ԯࠚא׏Ƥ׃
00008c  f7fffffe          BL       USART3_NVIC_Config
;;;152    }
000090  b007              ADD      sp,sp,#0x1c
000092  bd30              POP      {r4,r5,pc}
;;;153    
                          ENDP

                  |L4.148|
                          DCD      0x40020400
                  |L4.152|
                          DCD      0x40004800

                          AREA ||i.USART3_NVIC_Config||, CODE, READONLY, ALIGN=1

                  USART3_NVIC_Config PROC
;;;37     
;;;38     static void USART3_NVIC_Config(void)//Ԯࠚޓ˕א׏Ƥ׃
000000  b508              PUSH     {r3,lr}
;;;39     {
;;;40     	NVIC_InitTypeDef NVIC_InitStructure; 
;;;41     	/* Configure the NVIC Preemption Priority Bits */  
;;;42     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
000002  f44f60e0          MOV      r0,#0x700
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;43         
;;;44         /* Enable the USARTy Interrupt */
;;;45     	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;	 
00000a  2027              MOVS     r0,#0x27
00000c  f88d0000          STRB     r0,[sp,#0]
;;;46     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000010  2001              MOVS     r0,#1
000012  f88d0001          STRB     r0,[sp,#1]
;;;47     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000016  f88d0002          STRB     r0,[sp,#2]
;;;48     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00001a  f88d0003          STRB     r0,[sp,#3]
;;;49     	NVIC_Init(&NVIC_InitStructure);
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       NVIC_Init
;;;50     }
000024  bd08              POP      {r3,pc}
;;;51     
                          ENDP


                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;65     
;;;66     void USART_Configuration(void)//ԮࠚԵʼۯگ˽
000000  b570              PUSH     {r4-r6,lr}
;;;67     {  
000002  b086              SUB      sp,sp,#0x18
;;;68     	GPIO_InitTypeDef GPIO_InitStructure;
;;;69     	USART_InitTypeDef USART_InitStructure;
;;;70     	
;;;71     	/* config USART1 clock */
;;;72     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;73     	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
00000c  4e22              LDR      r6,|L6.152|
00000e  2207              MOVS     r2,#7
000010  2109              MOVS     r1,#9
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;74     	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;75     	/* USART1 GPIO config */
;;;76     	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;77     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000022  1570              ASRS     r0,r6,#21
000024  9004              STR      r0,[sp,#0x10]
;;;78     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000026  2502              MOVS     r5,#2
000028  f88d5014          STRB     r5,[sp,#0x14]
;;;79     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002c  2400              MOVS     r4,#0
00002e  f88d4016          STRB     r4,[sp,#0x16]
;;;80     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5015          STRB     r5,[sp,#0x15]
;;;81     	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  a904              ADD      r1,sp,#0x10
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;82     	/* Configure USART1 Rx (PA.10) as input floating */
;;;83     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00003e  0269              LSLS     r1,r5,#9
000040  9104              STR      r1,[sp,#0x10]
;;;84     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000042  f88d5014          STRB     r5,[sp,#0x14]
;;;85     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  a904              ADD      r1,sp,#0x10
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;86     	
;;;87     	/* USART1 mode config */
;;;88     	USART_InitStructure.USART_BaudRate = 19200;
00004e  f44f4096          MOV      r0,#0x4b00
000052  9000              STR      r0,[sp,#0]
;;;89     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000054  f8ad4004          STRH     r4,[sp,#4]
;;;90     	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000058  f8ad4006          STRH     r4,[sp,#6]
;;;91     	USART_InitStructure.USART_Parity = USART_Parity_No ;
00005c  f8ad4008          STRH     r4,[sp,#8]
;;;92     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000060  f8ad400c          STRH     r4,[sp,#0xc]
;;;93     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000064  200c              MOVS     r0,#0xc
000066  f8ad000a          STRH     r0,[sp,#0xa]
;;;94     	USART_Init(USART1, &USART_InitStructure);
00006a  4c0c              LDR      r4,|L6.156|
00006c  4669              MOV      r1,sp
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       USART_Init
;;;95     	
;;;96     	/******ʹŜԮࠚޓ˕א׏******************/
;;;97     	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       USART_ITConfig
;;;98     	USART_Cmd(USART1, ENABLE);//ʹŜԮࠚ1
000080  2101              MOVS     r1,#1
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       USART_Cmd
;;;99       USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       USART_ClearFlag
;;;100      
;;;101      USART1_NVIC_Config();//Ԯࠚא׏Ƥ׃
000090  f7fffffe          BL       USART1_NVIC_Config
;;;102    }				
000094  b006              ADD      sp,sp,#0x18
000096  bd70              POP      {r4-r6,pc}
;;;103    
                          ENDP

                  |L6.152|
                          DCD      0x40020000
                  |L6.156|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_Buffer_Rece
                          %        16

                          AREA ||area_number.9||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.bss||
                  UART_Buffer_Send
                          %        20

                          AREA ||.data||, DATA, ALIGN=1

                  USART_RX_STA
000000  0000              DCW      0x0000

                          AREA ||area_number.12||, DATA, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.data||
                  USART_RX_CNT
                          DCD      0x00000000

                          AREA ||area_number.13||, DATA, ALIGN=0

                          EXPORTAS ||area_number.13||, ||.data||
                  UART_Buffer_Send_pointer
000000  00                DCB      0x00
                  |symbol_number.27|
000001  00                DCB      0x00
                  Transmit_BUFFERsize
000002  00                DCB      0x00

                          AREA ||area_number.14||, DATA, ALIGN=0

                          EXPORTAS ||area_number.14||, ||.data||
                  UART_Buffer_Size
000000  00                DCB      0x00

                          AREA ||area_number.15||, DATA, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.data||
                  t_USART
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\drive\\usart.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_7cc17ae7____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REVSH|
#line 128
|__asm___7_usart_c_7cc17ae7____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
