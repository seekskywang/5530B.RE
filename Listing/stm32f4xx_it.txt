; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\stm32f4xx_it.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\stm32f4xx_it.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\stm32f4xx_it.crf ..\User\stm32f4xx_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
                  |L1.0|
;;;103      */
;;;104    void BusFault_Handler(void)
000000  e7fe              B        |L1.0|
;;;105    {
;;;106      /* Go to infinite loop when Bus Fault exception occurs */
;;;107      while (1)
;;;108      {
;;;109      }
;;;110    }
;;;111    
                          ENDP


                          AREA ||i.DMA2_Stream0_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Stream0_IRQHandler PROC
;;;185    
;;;186    void  DMA2_Stream0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;187    {
;;;188    	DMA_ClearITPendingBit(DMA2_Stream0,DMA_IT_TCIF0);
000002  4905              LDR      r1,|L2.24|
000004  4805              LDR      r0,|L2.28|
000006  f7fffffe          BL       DMA_ClearITPendingBit
;;;189    	Flag_ADC_Full=1;
00000a  4805              LDR      r0,|L2.32|
00000c  6801              LDR      r1,[r0,#0]  ; flagA
00000e  f0410102          ORR      r1,r1,#2
000012  6001              STR      r1,[r0,#0]  ; flagA
;;;190    }
000014  bd10              POP      {r4,pc}
;;;191    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x10008020
                  |L2.28|
                          DCD      0x40026410
                  |L2.32|
                          DCD      flagA

                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;138      */
;;;139    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;140    {
;;;141    }
;;;142    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
                  |L4.0|
;;;77       */
;;;78     void HardFault_Handler(void)
000000  e7fe              B        |L4.0|
;;;79     {
;;;80       /* Go to infinite loop when Hard Fault exception occurs */
;;;81       while (1)
;;;82       {
;;;83       }
;;;84     }
;;;85     
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
                  |L5.0|
;;;90       */
;;;91     void MemManage_Handler(void)
000000  e7fe              B        |L5.0|
;;;92     {
;;;93       /* Go to infinite loop when Memory Manage exception occurs */
;;;94       while (1)
;;;95       {
;;;96       }
;;;97     }
;;;98     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;68       */
;;;69     void NMI_Handler(void)
000000  4770              BX       lr
;;;70     {
;;;71     }
;;;72     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;147      */
;;;148    void PendSV_Handler(void)
000000  4770              BX       lr
;;;149    {
;;;150    }
;;;151    
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;129      */
;;;130    void SVC_Handler(void)
000000  4770              BX       lr
;;;131    {
;;;132    }
;;;133    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;156      */
;;;157    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;158    {
;;;159    	TimingDelay_Decrement();
000002  f7fffffe          BL       TimingDelay_Decrement
;;;160    	OS_TimeMS++;
000006  4918              LDR      r1,|L9.104|
000008  6808              LDR      r0,[r1,#0]  ; OS_TimeMS
00000a  1c40              ADDS     r0,r0,#1
00000c  6008              STR      r0,[r1,#0]  ; OS_TimeMS
;;;161    	t_KeyScan++;
00000e  4817              LDR      r0,|L9.108|
000010  7801              LDRB     r1,[r0,#0]  ; t_KeyScan
000012  1c49              ADDS     r1,r1,#1
000014  7001              STRB     r1,[r0,#0]
;;;162    	if(t_KeyScan>10)
000016  7803              LDRB     r3,[r0,#0]  ; t_KeyScan
;;;163    	{
;;;164    		t_KeyScan=0;
;;;165    		Flag_Key_Scan=1;//дݼлֶҪ־
000018  4a15              LDR      r2,|L9.112|
00001a  2100              MOVS     r1,#0                 ;164
00001c  2b0a              CMP      r3,#0xa               ;162
00001e  d904              BLS      |L9.42|
000020  7001              STRB     r1,[r0,#0]            ;164
000022  6810              LDR      r0,[r2,#0]  ; flagA
000024  f0400008          ORR      r0,r0,#8
000028  6010              STR      r0,[r2,#0]  ; flagA
                  |L9.42|
;;;166    	}
;;;167    	t_0_5S++;
00002a  4812              LDR      r0,|L9.116|
00002c  8803              LDRH     r3,[r0,#0]  ; t_0_5S
00002e  1c5b              ADDS     r3,r3,#1
000030  8003              STRH     r3,[r0,#0]
;;;168    	if(t_0_5S>20)
000032  8803              LDRH     r3,[r0,#0]  ; t_0_5S
000034  2b14              CMP      r3,#0x14
000036  d904              BLS      |L9.66|
;;;169    	{
;;;170    		t_0_5S=0;
000038  8001              STRH     r1,[r0,#0]
;;;171    		Flag_0_5S =1;//ؤĹǷЬһʹҪ־
00003a  6810              LDR      r0,[r2,#0]  ; flagA
00003c  f0400080          ORR      r0,r0,#0x80
000040  6010              STR      r0,[r2,#0]  ; flagA
                  |L9.66|
;;;172    	}
;;;173    //--------------------------------------------
;;;174    	if(flag_Tim_USART==1)//Ԯࠚȥ£݆˽
000042  4b0d              LDR      r3,|L9.120|
;;;175    	{
;;;176    		t_USART++;
000044  4a0d              LDR      r2,|L9.124|
000046  6818              LDR      r0,[r3,#0]            ;174  ; flagD
000048  07c4              LSLS     r4,r0,#31             ;174
00004a  d002              BEQ      |L9.82|
00004c  7814              LDRB     r4,[r2,#0]  ; t_USART
00004e  1c64              ADDS     r4,r4,#1
000050  7014              STRB     r4,[r2,#0]
                  |L9.82|
;;;177    	}
;;;178    	if(t_USART>40)//ճԼ2.6ms
000052  7814              LDRB     r4,[r2,#0]  ; t_USART
000054  2c28              CMP      r4,#0x28
000056  d905              BLS      |L9.100|
;;;179    	{
;;;180    		t_USART=0;
000058  7011              STRB     r1,[r2,#0]
;;;181    		flag_Tim_USART=0;
00005a  f0200001          BIC      r0,r0,#1
00005e  6018              STR      r0,[r3,#0]  ; flagD
;;;182    		UART_Buffer_Size=0;	
000060  4807              LDR      r0,|L9.128|
000062  7001              STRB     r1,[r0,#0]
                  |L9.100|
;;;183    	}
;;;184    }
000064  bd10              POP      {r4,pc}
;;;185    
                          ENDP

000066  0000              DCW      0x0000
                  |L9.104|
                          DCD      OS_TimeMS
                  |L9.108|
                          DCD      t_KeyScan
                  |L9.112|
                          DCD      flagA
                  |L9.116|
                          DCD      t_0_5S
                  |L9.120|
                          DCD      flagD
                  |L9.124|
                          DCD      t_USART
                  |L9.128|
                          DCD      UART_Buffer_Size

                          AREA ||i.TIM6_DAC_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM6_DAC_IRQHandler PROC
;;;191    
;;;192    void  TIM6_DAC_IRQHandler (void)
000000  2101              MOVS     r1,#1
;;;193    {
;;;194    	TIM_ClearITPendingBit(TIM6,TIM_IT_Update);//ȥא׏Ҫ־λ
000002  4801              LDR      r0,|L10.8|
000004  f7ffbffe          B.W      TIM_ClearITPendingBit
;;;195    }
;;;196    
                          ENDP

                  |L10.8|
                          DCD      0x40001000

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;196    
;;;197    void USART1_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;198    {
;;;199    	flag_Tim_USART=1;
000002  4c1d              LDR      r4,|L11.120|
000004  6820              LDR      r0,[r4,#0]  ; flagD
000006  f0400001          ORR      r0,r0,#1
00000a  6020              STR      r0,[r4,#0]  ; flagD
;;;200     	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
00000c  4d1b              LDR      r5,|L11.124|
00000e  f2405125          MOV      r1,#0x525
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       USART_GetITStatus
000018  2800              CMP      r0,#0
00001a  d01c              BEQ      |L11.86|
;;;201    	{
;;;202    		UART_Buffer_Rece[UART_Buffer_Size]=USART_ReceiveData(USART1);
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       USART_ReceiveData
000022  4918              LDR      r1,|L11.132|
000024  4a16              LDR      r2,|L11.128|
000026  780b              LDRB     r3,[r1,#0]  ; UART_Buffer_Size
000028  54d0              STRB     r0,[r2,r3]
;;;203    		UART_Buffer_Size++;
00002a  7808              LDRB     r0,[r1,#0]  ; UART_Buffer_Size
00002c  1c40              ADDS     r0,r0,#1
00002e  7008              STRB     r0,[r1,#0]
;;;204    		if (UART_Buffer_Size > 7)
000030  7808              LDRB     r0,[r1,#0]  ; UART_Buffer_Size
000032  2807              CMP      r0,#7
000034  d90f              BLS      |L11.86|
;;;205    		{
;;;206    			if (UART_Buffer_Rece[1] == 16)
000036  7856              LDRB     r6,[r2,#1]  ; UART_Buffer_Rece
;;;207    			{	
;;;208    				if (UART_Buffer_Size > (UART_Buffer_Rece[6]+8))
;;;209    				{
;;;210    					UART_Buffer_Size=0;	  	   		   
000038  2300              MOVS     r3,#0
;;;211    					UART_Buffer_Rece_flag=1;
00003a  4813              LDR      r0,|L11.136|
;;;212    					flag_Tim_USART=0;
;;;213    					t_USART=0;
00003c  4d13              LDR      r5,|L11.140|
00003e  2e10              CMP      r6,#0x10              ;206
000040  d00a              BEQ      |L11.88|
;;;214    				}
;;;215    			}
;;;216    			else
;;;217    			{
;;;218    				UART_Buffer_Size=0;	  	   	   
000042  700b              STRB     r3,[r1,#0]
;;;219    				UART_Buffer_Rece_flag=1;  
000044  6801              LDR      r1,[r0,#0]  ; flagA
000046  f0410120          ORR      r1,r1,#0x20
00004a  6001              STR      r1,[r0,#0]  ; flagA
;;;220    				flag_Tim_USART=0;
00004c  6820              LDR      r0,[r4,#0]  ; flagD
00004e  f0200001          BIC      r0,r0,#1
000052  6020              STR      r0,[r4,#0]  ; flagD
;;;221    				t_USART=0;
000054  702b              STRB     r3,[r5,#0]
                  |L11.86|
;;;222    			}	  
;;;223    		}
;;;224    	}
;;;225    }
000056  bd70              POP      {r4-r6,pc}
                  |L11.88|
000058  7992              LDRB     r2,[r2,#6]            ;208  ; UART_Buffer_Rece
00005a  780e              LDRB     r6,[r1,#0]            ;208  ; UART_Buffer_Size
00005c  3208              ADDS     r2,r2,#8              ;208
00005e  42b2              CMP      r2,r6                 ;208
000060  d2f9              BCS      |L11.86|
000062  700b              STRB     r3,[r1,#0]            ;210
000064  6801              LDR      r1,[r0,#0]            ;211  ; flagA
000066  f0410120          ORR      r1,r1,#0x20           ;211
00006a  6001              STR      r1,[r0,#0]            ;211  ; flagA
00006c  6820              LDR      r0,[r4,#0]            ;212  ; flagD
00006e  f0200001          BIC      r0,r0,#1              ;212
000072  6020              STR      r0,[r4,#0]            ;212  ; flagD
000074  702b              STRB     r3,[r5,#0]            ;213
000076  bd70              POP      {r4-r6,pc}
;;;226    void USART3_IRQHandler(void)
                          ENDP

                  |L11.120|
                          DCD      flagD
                  |L11.124|
                          DCD      0x40011000
                  |L11.128|
                          DCD      UART_Buffer_Rece
                  |L11.132|
                          DCD      UART_Buffer_Size
                  |L11.136|
                          DCD      flagA
                  |L11.140|
                          DCD      t_USART

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;225    }
;;;226    void USART3_IRQHandler(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;227    {
000004  ed2d8b02          VPUSH    {d8}
;;;228        static vu8 count = 0;
;;;229        u8 res; 
;;;230        static vu8 i = 0;
;;;231        static float sum;
;;;232        if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
000008  f2405725          MOV      r7,#0x525
00000c  4e35              LDR      r6,|L12.228|
00000e  4639              MOV      r1,r7
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       USART_GetITStatus
000016  2800              CMP      r0,#0
000018  d05f              BEQ      |L12.218|
;;;233        {
;;;234            
;;;235            res =USART_ReceiveData(USART3);//(USART1->DR); //ׁȡޓ˕սք˽ߝ
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       USART_ReceiveData
000020  b2c2              UXTB     r2,r0
;;;236            if(count == 0)
000022  4c31              LDR      r4,|L12.232|
000024  7820              LDRB     r0,[r4,#0]  ; count
;;;237            {
;;;238                if(res == 0x03)
;;;239                {
;;;240                    count = 1;
;;;241                }else{
;;;242                    count = 0;
000026  2500              MOVS     r5,#0
000028  b178              CBZ      r0,|L12.74|
;;;243                }
;;;244            }else if(count == 1){
00002a  7820              LDRB     r0,[r4,#0]  ; count
00002c  2801              CMP      r0,#1
00002e  d013              BEQ      |L12.88|
;;;245                 if(res == 0xff)
;;;246                {
;;;247                    count = 2;
;;;248                }else{
;;;249                    count = 0;
;;;250                }
;;;251                
;;;252            }else if(count > 1 && count <4)
000030  7821              LDRB     r1,[r4,#0]  ; count
;;;253            {
;;;254                UART_Buffer_Rece[count] = res;               
000032  482e              LDR      r0,|L12.236|
000034  2901              CMP      r1,#1                 ;252
000036  d916              BLS      |L12.102|
000038  7821              LDRB     r1,[r4,#0]            ;252  ; count
00003a  2904              CMP      r1,#4                 ;252
00003c  d213              BCS      |L12.102|
00003e  7821              LDRB     r1,[r4,#0]  ; count
000040  5442              STRB     r2,[r0,r1]
;;;255    //            temp = (UART_Buffer_Rece[2] * 256 + UART_Buffer_Rece[3])/10.0;
;;;256                count ++;
000042  7820              LDRB     r0,[r4,#0]  ; count
000044  1c40              ADDS     r0,r0,#1
000046  7020              STRB     r0,[r4,#0]
000048  e03f              B        |L12.202|
                  |L12.74|
00004a  2a03              CMP      r2,#3                 ;238
00004c  d001              BEQ      |L12.82|
00004e  7025              STRB     r5,[r4,#0]            ;242
000050  e03b              B        |L12.202|
                  |L12.82|
000052  2001              MOVS     r0,#1                 ;240
000054  7020              STRB     r0,[r4,#0]            ;240
000056  e038              B        |L12.202|
                  |L12.88|
000058  2aff              CMP      r2,#0xff              ;245
00005a  d001              BEQ      |L12.96|
00005c  7025              STRB     r5,[r4,#0]            ;249
00005e  e034              B        |L12.202|
                  |L12.96|
000060  2002              MOVS     r0,#2                 ;247
000062  7020              STRB     r0,[r4,#0]            ;247
000064  e031              B        |L12.202|
                  |L12.102|
;;;257            }else if(count == 4)
000066  7821              LDRB     r1,[r4,#0]  ; count
000068  2904              CMP      r1,#4
00006a  d12e              BNE      |L12.202|
;;;258            {
;;;259                if(i < 10)
00006c  7861              LDRB     r1,[r4,#1]  ; i
;;;260                {
;;;261                 sum += (UART_Buffer_Rece[2] * 256 + UART_Buffer_Rece[3])/10.0;
00006e  ed9f8b20          VLDR     d8,|L12.240|
000072  290a              CMP      r1,#0xa               ;259
000074  d216              BCS      |L12.164|
000076  78c1              LDRB     r1,[r0,#3]  ; UART_Buffer_Rece
000078  7880              LDRB     r0,[r0,#2]  ; UART_Buffer_Rece
00007a  eb012000          ADD      r0,r1,r0,LSL #8
00007e  f7fffffe          BL       __aeabi_ui2d
000082  ec532b18          VMOV     r2,r3,d8
000086  f7fffffe          BL       __aeabi_ddiv
00008a  ec410b18          VMOV     d8,r0,r1
00008e  6860              LDR      r0,[r4,#4]  ; sum
000090  f7fffffe          BL       __aeabi_f2d
000094  ec532b18          VMOV     r2,r3,d8
000098  f7fffffe          BL       __aeabi_dadd
00009c  f7fffffe          BL       __aeabi_d2f
0000a0  6060              STR      r0,[r4,#4]  ; sum
0000a2  e00e              B        |L12.194|
                  |L12.164|
;;;262                }else{
;;;263                    temp = sum/10.0;
0000a4  6860              LDR      r0,[r4,#4]  ; sum
0000a6  f7fffffe          BL       __aeabi_f2d
0000aa  ec532b18          VMOV     r2,r3,d8
0000ae  f7fffffe          BL       __aeabi_ddiv
0000b2  f7fffffe          BL       __aeabi_d2f
0000b6  60a0              STR      r0,[r4,#8]  ; temp
;;;264                    sum = 0;
0000b8  ed9f0a0f          VLDR     s0,|L12.248|
0000bc  ed840a01          VSTR     s0,[r4,#4]
;;;265                    i = 0;
0000c0  7065              STRB     r5,[r4,#1]
                  |L12.194|
;;;266                }
;;;267                 count =0;
0000c2  7025              STRB     r5,[r4,#0]
;;;268                 i ++;
0000c4  7860              LDRB     r0,[r4,#1]  ; i
0000c6  1c40              ADDS     r0,r0,#1
0000c8  7060              STRB     r0,[r4,#1]
                  |L12.202|
;;;269            }
;;;270            USART_ClearITPendingBit(USART3, USART_IT_RXNE);
0000ca  4639              MOV      r1,r7
0000cc  ecbd8b02          VPOP     {d8}
0000d0  4630              MOV      r0,r6
0000d2  e8bd41f0          POP      {r4-r8,lr}
0000d6  f7ffbffe          B.W      USART_ClearITPendingBit
                  |L12.218|
;;;271         }
;;;272    }
0000da  ecbd8b02          VPOP     {d8}
0000de  e8bd81f0          POP      {r4-r8,pc}
;;;273    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L12.228|
                          DCD      0x40004800
                  |L12.232|
                          DCD      ||.data||
                  |L12.236|
                          DCD      UART_Buffer_Rece
                  |L12.240|
0000f0  00000000          DCFD     0x4024000000000000 ; 10
0000f4  40240000
                  |L12.248|
0000f8  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
                  |L13.0|
;;;116      */
;;;117    void UsageFault_Handler(void)
000000  e7fe              B        |L13.0|
;;;118    {
;;;119      /* Go to infinite loop when Usage Fault exception occurs */
;;;120      while (1)
;;;121      {
;;;122      }
;;;123    }
;;;124    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  count
000000  00                DCB      0x00
                  i
000001  000000            DCB      0x00,0x00,0x00
                  ||sum||
                          DCD      0x00000000
                  temp
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\User\\stm32f4xx_it.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_stm32f4xx_it_c_bb8ca80c____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH|
#line 128
|__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
